//noinspection JSUnresolvedFunctionconst Enum = require("EnumTypes");//noinspection JSUnresolvedFunctionconst Global = require("Global");//noinspection JSUnresolvedFunctionconst Constants = require("Constants");//noinspection JSUnresolvedFunctionconst FigureTile = require("FigureTile");cc.Class({    extends: FigureTile,    properties: {        tileKind: {            get: function () {                return Enum.TileKind.Relic;            },            type: Enum.TileKind,            override: true,            visible: false,            tooltip: "kind of tile"        },        isMatchable: {            default: false,            visible: false,            override: true,            tooltip: "whether or not this tile can make match."        },        relicName: {            default: "",            visible: false        }    },    // use this for initialization    onLoad: function () {        this._super();    },    crushTile: function () {    },    pickupTile: function () {        this.showRelicCollectingAction();    },    showRelicCollectingAction: function () {        let relicGroupNode = cc.find("Canvas/ui_nodes/top_status_area/top_1/relic");        let uiNode = cc.find("Canvas/ui_nodes");        let relicGroupPos = Global.transformCoordinates(relicGroupNode, uiNode);        let wNodePos = Global.transformCoordinates(this.node, uiNode);        this.node.setAnchorPoint(0.5, 0.5);        this.node.x = wNodePos.x;// + Constants.TileSize / 2;        this.node.y = wNodePos.y;// + Constants.TileSize / 2;        this.node.removeFromParent(false);        this.node.getChildByName("relic_effect1").active = false;        this.node.getChildByName("relic_effect2").active = false;        uiNode.addChild(this.node);        let bezierPoints = [cc.v2(wNodePos.x, wNodePos.y - 3 * Constants.TileSize), cc.v2(0, 0), relicGroupPos];        let bezierTo = cc.bezierTo(1, bezierPoints);        // Global.PendingActions++;        this.isPendingHole = true;        this.node.emit(Constants.FIGURE_DESTROYED, {col:this.gridPosition.x, row: this.gridPosition.y, recycleDelay: 0.3});        this.notifyRelicCollected();        this.node.runAction(cc.sequence(            cc.moveBy(0.3, 0, - 2 * Constants.TileSize),            bezierTo,            // cc.callFunc(this.notifyRelicCollected, this),            cc.removeSelf(true)        ));    },    notifyRelicCollected: function () {        // Global.PendingActions--;        this.node.emit(Constants.RELIC_COLLECTED, this.relicName);    },    // called every frame, uncomment this function to activate update callback    // update: function (dt) {    // },});